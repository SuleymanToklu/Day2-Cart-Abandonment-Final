import streamlit as st
import pandas as pd
import joblib

# --- Sayfa AyarlarÄ± ---
st.set_page_config(page_title="Sepeti Terk Etme Tahmini", page_icon="ğŸ›’", layout="wide")

# --- KaynaklarÄ± YÃ¼kleme ---
@st.cache_resource
def load_resources():
    try:
        model = joblib.load('model.pkl')
        model_columns = joblib.load('model_columns.pkl')
        return model, model_columns
    except FileNotFoundError:
        return None, None

model, model_columns = load_resources()

# --- Ana BaÅŸlÄ±k ---
st.title("ğŸ›’ AlÄ±ÅŸveriÅŸ Sepeti Terk Etme Tahmini Projesi")
st.markdown("Bu interaktif uygulama, bir online ziyaretÃ§inin davranÄ±ÅŸlarÄ±nÄ± analiz ederek satÄ±n alma iÅŸlemini tamamlayÄ±p tamamlamayacaÄŸÄ±nÄ± tahmin eder.")

# --- Sekmeli Ä°Ã§erik YapÄ±sÄ± ---
tab1, tab2 = st.tabs(["ğŸ“Š **Proje Raporu**", "ğŸ§  **Tahmin AracÄ±**"])

with tab1:
    st.header("Model GeliÅŸtirme Hikayesi: Finetuning'in GÃ¼cÃ¼")
    st.write("""
    Ä°lk 'Baseline' model, satÄ±n alacak mÃ¼ÅŸterileri yakalamada zayÄ±f kaldÄ±. Bu sorunu Ã§Ã¶zmek iÃ§in, dengesiz veri setine Ã¶zel bir hiperparametre (`scale_pos_weight`) ile model **Finetune** edildi ve mÃ¼ÅŸteri yakalama oranÄ± **%57'den %68'e** yÃ¼kseltildi. Bu, daha fazla potansiyel satÄ±ÅŸÄ±n kurtarÄ±lmasÄ± anlamÄ±na geliyor.
    """)
    
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("Ã–nce: Baseline Model")
        st.image("baseline_cm.png", use_column_width=True)
    with col2:
        st.subheader("Sonra: Finetuned Model")
        st.image("tuned_cm.png", use_column_width=True)
    
    st.header("Modelin Karar Kriterleri")
    st.write("Model, bir mÃ¼ÅŸterinin sepeti terk edip etmeyeceÄŸine karar verirken bazÄ± Ã¶zelliklere diÄŸerlerinden daha fazla Ã¶nem verir. AÅŸaÄŸÄ±da modelin en Ã¶nemli bulduÄŸu 10 kriteri gÃ¶rebilirsiniz:")
    st.image("feature_importance.png", use_column_width=True)

with tab2:
    st.header("CanlÄ± Tahmin AracÄ±")
    st.write("AÅŸaÄŸÄ±daki slider ve seÃ§enekleri deÄŸiÅŸtirerek farklÄ± ziyaretÃ§i profilleri iÃ§in tahminler yapabilirsiniz.")
    
    if not model or not model_columns:
        st.error("Model dosyalarÄ± yÃ¼klenemedi. LÃ¼tfen Ã¶nce `train_model.py`'yi Ã§alÄ±ÅŸtÄ±rÄ±n.")
    else:
        # --- KullanÄ±cÄ± Girdileri ---
        product_related = st.slider('Gezilen ÃœrÃ¼n SayfasÄ±', 0, 700, 30)
        exit_rates = st.slider('Ã‡Ä±kÄ±ÅŸ OranÄ±', 0.0, 0.2, 0.04, format="%.4f")
        page_values = st.slider('Sayfa DeÄŸeri', 0.0, 362.0, 6.0, format="%.2f")
        month = st.selectbox('Ay', ['Feb', 'Mar', 'May', 'June', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])
        visitor_type = st.selectbox('ZiyaretÃ§i Tipi', ['Returning_Visitor', 'New_Visitor', 'Other'])

        if st.button('Tahmin Yap'):
            input_dict = {col: 0 for col in model_columns}
            input_dict['ProductRelated'] = product_related
            input_dict['ExitRates'] = exit_rates
            input_dict['PageValues'] = page_values
            
            month_col = 'Month_' + month
            if month_col in input_dict:
                input_dict[month_col] = 1
            
            visitor_col = 'VisitorType_' + visitor_type
            if visitor_col in input_dict:
                input_dict[visitor_col] = 1
                    
            input_df = pd.DataFrame([input_dict])[model_columns]
            
            prediction = model.predict(input_df)
            prediction_proba = model.predict_proba(input_df)

            st.subheader('ğŸ”® Tahmin Sonucu')
            if prediction[0] == 1:
                st.success(f"Bu ziyaretÃ§inin SATIN ALMA olasÄ±lÄ±ÄŸÄ± yÃ¼ksek! (OlasÄ±lÄ±k: {prediction_proba[0][1]:.2%})")
            else:
                st.error(f"Bu ziyaretÃ§inin SEPETÄ° TERK ETME olasÄ±lÄ±ÄŸÄ± yÃ¼ksek. (SatÄ±n Almama OlasÄ±lÄ±ÄŸÄ±: {prediction_proba[0][0]:.2%})")